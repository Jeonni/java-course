// 학샏이라는 객체를 만들기 위한 설계도 (클래스)
class Student {
	// 학생이 가질 특성 (속성)을 저장할 변수 → 필드 (멤버 변수)
	// 학생의 이름
	String name;
	// 학생의 나이
	int age;
	// 학생의 학년
	int grade;
	// 학생의 반
	int classNum;
	// 학생의 국어 점수
	int kor;
	// 학생의 영어 점수
	int eng;
	// 학생의 수학 점수
	int math;
	// 학생의 평균 점수
	double avg;
	
	// 학생이 할 행동(기능) → 메서드(멤버 함수)
	void study() {
		System.out.println(name + " : 공부하기");
	}
}

// 프로그램을 시작할 클래스
public class File01_Class_Object {

	public static void main(String[] args) {
		// 학생의 이름
		// 학생의 나이
		// 학생의 학년
		// 학생의 반
		
		// 위의 데이터들을 배열로 사용하기엔 데이터의 타입이 모두 동일하지 않고,
		// 데이터의 특징 또한 모두 다르디/
		
		// 위와 같이 데이터에 중점을 맞춘느게 아닌 주체에 중점을 맞춰서
		// 하나의 묶음으로 묶는 단위 : 클래스
		
		// 위처럼 클래스 내에는
		// 객체의 특성을 저장한 변수와
		// 객체의 기능을 수해할 함수(메서드)를 정의한다.
		// 객체의 특성을 저장할 변수 → 필드 (멤버 변수)
		// 객체의 기능을 수행할 함수 → 메서드 (멤버 함수)
		
		// 클래스는 설계도이기 때문에 바로 사용할 수 없다.
		// 클래스는 객체를 만들기 위한 설계도이기 때문에,
		// 데이터를 저장하고 기능을 수행하려면 객체를 만들어야 한다.
		
		// 객체를 만드는 방법은 배열과 동일하다.
		// 즉, 객체도 메모리를 할당받아서 생성한다.
		// → new 키워드를 사용
		// Student 객체를 참조하기 위한 참조변수를 선언
		Student std1;
		// Student 객체의 참조 변수는 객체의 주소를 참조하기 위한 변수이기 때문에
		// 데이터를 저장할 수 없다. → 객체를 생성해야 한다.
		std1 = new Student();
		System.out.println(std1);
		
		// 객체를 선언과 동시에 생성할 수 있다.
		Student std2 = new Student();
		
		// 객체를 사용하는 방법 : 객체의 멤버에 접근
		// → 객체.멤버
		std1.name = "Jeonni";
		std1.age = 22;
		std1.grade = 3;
		std1.classNum = 2;
		std1.kor = 80;
		std1.eng = 90;
		std1.math  = 100;
	
		std1.study();
		
		// ==========================
		std2.name = "이지연";
		std2.study();
	}

}
